CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

SET(PROJECT_NAME sfml-oculus)

ENABLE_TESTING()

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake)
FIND_PACKAGE(Eigen3)
INCLUDE_DIRECTORIES(${EIGEN3_INCLUDE_DIR})

IF(NOT WIN32)
# C++0x is only used internally for convenience such as auto, no need to enable it in visual studio
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
ENDIF(NOT WIN32)

# FIXME Set to appropriate directory if having trouble to find OVRSDK, second entry is for travis
FIND_PATH(OCULUS_SDK_DIR "LibOVR/Include/OVR.h" PATHS ${CMAKE_SOURCE_DIR}/../OculusSDK ${CMAKE_BINARY_DIR}/jherico/OculusSDK ${CMAKE_SOURCE_DIR}/../jherico/OculusSDK ${CMAKE_SOURCE_DIR}/../../jherico/OculusSDK)
IF(NOT OCULUS_SDK_DIR)
  MESSAGE(FATAL_ERROR "Oculus SDK include directory not found")
ELSE()
  MESSAGE("Found Oculus SDK at ${OCULUS_SDK_DIR}")
ENDIF(NOT OCULUS_SDK_DIR)
# FIXME

IF(WIN32)
    SET(USE_JHERICO_SDK 0)
ELSE(WIN32)
    SET(USE_JHERICO_SDK 1)
ENDIF(WIN32)

INCLUDE_DIRECTORIES(${OCULUS_SDK_DIR}/LibOVR/Include)
IF(USE_JHERICO_SDK EQUAL 1)
    LINK_DIRECTORIES(${OCULUS_SDK_DIR}/LibOVR/)
    LINK_DIRECTORIES(${OCULUS_SDK_DIR}/3rdParty/EDID)
    SET(OCULUS_LIB OculusVR edid)
ELSE()
    IF(NOT WIN32)
        LINK_DIRECTORIES(${OCULUS_SDK_DIR}/LibOVR/Lib/Linux/Release/i386)
        LINK_DIRECTORIES(${OCULUS_SDK_DIR}/LibOVR/Lib/Linux/Release/x86_64)
        SET(OCULUS_LIB ovr)
    ELSE(NOT WIN32)
        LINK_DIRECTORIES(${OCULUS_SDK_DIR}/LibOVR/Lib/Win32/)
        SET(OCULUS_LIB libovr.lib)
    ENDIF(NOT WIN32)
ENDIF()
MESSAGE("Found OVR library ${OCULUS_LIB}")


INCLUDE_DIRECTORIES(${CMAKE_INSTALL_PREFIX}/include)
LINK_DIRECTORIES(${CMAKE_INSTALL_PREFIX}/lib)

SET(${PROJECT_NAME}_LIB_SRC
src/OVRWrapper.cpp
src/SFMLScreen.cpp
src/PostProcessing.cpp
src/OculusWindow.cpp
)

SET(${PROJECT_NAME}_EXAMPLE_SRC
src/PLYMesh.cpp
src/sfml-oculus-example.cpp
)

ADD_LIBRARY(${PROJECT_NAME} SHARED ${${PROJECT_NAME}_LIB_SRC})

IF(WIN32)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} "${OCULUS_LIB};sfml-graphics.lib;sfml-window.lib;sfml-system.lib;glew32.lib;OpenGL32.lib;")
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} "winmm")
ELSE(WIN32)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} udev Xinerama ${OCULUS_LIB} sfml-graphics sfml-window sfml-system GL boost_filesystem pthread boost_system X11)
ENDIF(WIN32)

ADD_EXECUTABLE(${PROJECT_NAME}-example ${${PROJECT_NAME}_EXAMPLE_SRC})
TARGET_LINK_LIBRARIES(${PROJECT_NAME}-example ${PROJECT_NAME})

ADD_EXECUTABLE(test-sfmlscreen test/test-sfmlscreen.cpp)
TARGET_LINK_LIBRARIES(test-sfmlscreen ${PROJECT_NAME})

SET(BG
${CMAKE_SOURCE_DIR}/bg/background.png
)

SET(FONTS
${CMAKE_SOURCE_DIR}/fonts/arial.ttf
)

SET(MODELS
${CMAKE_SOURCE_DIR}/models/can-00000.jpg
${CMAKE_SOURCE_DIR}/models/can-00001.jpg
${CMAKE_SOURCE_DIR}/models/can-00002.jpg
${CMAKE_SOURCE_DIR}/models/can-00003.jpg
${CMAKE_SOURCE_DIR}/models/can-00004.jpg
${CMAKE_SOURCE_DIR}/models/can-00005.jpg
${CMAKE_SOURCE_DIR}/models/can-00006.jpg
${CMAKE_SOURCE_DIR}/models/can.ply
)

SET(SHADERS
${CMAKE_SOURCE_DIR}/shaders/ply_shader.frag
${CMAKE_SOURCE_DIR}/shaders/ply_shader.vert
)

FILE(COPY ${BG} DESTINATION ${CMAKE_BINARY_DIR}/bg)
FILE(COPY ${FONTS} DESTINATION ${CMAKE_BINARY_DIR}/fonts)
FILE(COPY ${MODELS} DESTINATION ${CMAKE_BINARY_DIR}/models)
FILE(COPY ${SHADERS} DESTINATION ${CMAKE_BINARY_DIR}/shaders)

INSTALL(TARGETS ${PROJECT_NAME}
  RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/bin
  LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
  ARCHIVE DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)
INSTALL(FILES src/OculusWindow.h DESTINATION ${CMAKE_INSTALL_PREFIX}/include)
